name: CDK Deploy / Infrastructure provisioning / Application deployment

# I would concider changing this to work with different branches based on the environment.
on:
  push:
    branches:
      - main
    
jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "18"

      - name: Install AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install
      
      # I would concider changing this to use assume iam-role for better security.
      - name: Configure AWS credentials
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set default.region us-east-1 # or preferred AWS region

      - name: Install AWS CDK
        run: npm install -g aws-cdk

      - name: Deploy
        run: |
          cd infrastructure
          cdk deploy --require-approval never

      - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image to Amazon ECR
          env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            ECR_REPOSITORY: matific-django-testapp
          run: |
            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Application deployment
          env:
            AWS_DEFAULT_REGION: us-east-1 # or preferred AWS region / I would concider variablized based on the environment
            CLUSTER_NAME: matific-django-ecs-cluster
            SERVICE_NAME: testapp-ecs-service
          run: |
            # Get the latest revision of the ECS task definition
            TASK_DEFINITION=$(aws ecs describe-services --cluster $CLUSTER_NAME --services $SERVICE_NAME --query 'services[0].taskDefinition' --output text)

            # Create a new revision of the ECS task definition with the updated image
            NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE "$ECR_REGISTRY/$ECR_REPOSITORY:latest" '.taskDefinition | fromjson | .containerDefinitions[0].image = $IMAGE | . | tostring')
            REGISTERED_TASK_DEFINITION=$(aws ecs register-task-definition --cli-input-json "$NEW_TASK_DEFINITION" --query 'taskDefinition.taskDefinitionArn' --output text)

            # Update the ECS service with the new task definition
            aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --task-definition $REGISTERED_TASK_DEFINITION
